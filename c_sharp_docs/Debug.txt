Debug
Switch to Scripting

The Debug class allows you to visualise information in the Editor that may help you understand or investigate what is going on in your project while it is running. For example, you can use it to print messages into the Console window
, draw visualization lines in the Scene
view and Game view, and pause Play Mode in the Editor from script.

This page provides an overview of the Debug class and its common uses when scripting with it. For an exhaustive reference of every member of the Debug class, see the Debug script reference.
Logging errors, warnings and messages

Unity itself sometimes logs errors, warnings and messages to the Console window. The Debug class provides you with the ability to do exactly the same from your own code, as shown below:

Debug.Log("This is a log message.");
Debug.LogWarning("This is a warning message!");
Debug.LogError("This is an error message!");

The three types (error, warning, and message) each have their own icon type in the Console window.

Everything that is written to the Console Window (by Unity, or your own code) is also written to a Log File.

If you have Error Pause enabled in the Console, any errors that you write to the Console via the Debug class will cause Unity’s Play Mode to pause.

You can also optionally provide a second parameter to these log methods to indicate that the message is associated with a particular GameObject
, like this:

using UnityEngine;

public class DebugExample : MonoBehaviour
{    void Start()
    {
        Debug.LogWarning("I come in peace!", this.gameObject);
    }
}

The benefit of this is that when you click the message in the console, the GameObject you associated with that message is highlighted in the Hierarchy, allowing you to identify which GameObject the message related to. In the image below you can see that clicking the “I come in peace!” warning message highlights the “Alien (8)” GameObject.

The Debug class also offers two methods for drawing lines in the Scene view
and Game view. These are DrawLine and DrawRay.

In this example, a script has been added to every Sphere GameObject in the scene, which uses Debug.DrawLine to indicate its vertical distance from the plane where Y equals zero. Note that the last parameter in this example is the duration in seconds that the line should stay visible in the Editor.